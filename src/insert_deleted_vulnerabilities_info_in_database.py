#!/usr/bin/env python3

"""
	This script inserts the data from any CSV files generated by "collect_vulnerabilities.py" into the VULNERABILITIES table in the database.
	Before running this script, the table must be first modified by running "alter_vulnerabilities_in_database.py".
"""

import numpy as np # type: ignore
import pandas as pd # type: ignore

from modules.common import log
from modules.database import Database
from modules.project import Project
from modules.cve import Cve

import sys

INPUT = None
OUTPUT = "affected-files.csv"

####################################################################################################

def search_for_reason(cve: str) -> str:
    ''' 
        This function receives a url for a cve and search if the affected product have something or not.
        If yes, the problem is that thios field change, else the field was just removed.
    
        Params:
                cve (str): url from cve web page

        Return:
                string (str): reason "Doesn't have Affected Product" or "Change Affected Product"
    '''
    # Search the content of the website a field a Cve object to help
    cve_object = Cve(str(cve.split("/")[-1]), "a")
    page_soup = cve_object.download_cve_details_page(cve)

    # Search for the table
    products_table = page_soup.find(string=f'Products affected by {str(cve.split("/")[-1])}')

    # If it is None, the field was removed
    if products_table is None:
        return "Doesn't have Affected Product"
        
    else:
        # Search if there is one or more entries
        products_table = products_table.find_all_next('li', class_="list-group-item list-group-item-action border-0 border-top")
        
        # If yes, the field was changed
        if len(products_table) >= 1:
            return "Change Affected Product"
                
    return "Doesn't have Affected Product"

def main(project_to_analizys: str) -> None: 
    '''
        Function thats starts the process.
		
		Params:
			project_to_analizys(str): name of the project or an empty string that represents everthing except kernel and mozilla
    '''
    with Database(buffered=True) as db:

        # Get the information of the projects
        project_list = Project.get_project_list_from_config()
        
        # Iterate for each one and continue only if the the params correspond
        for project in project_list:
        
            if project.short_name == project_to_analizys:
                pass
            elif project_to_analizys == "":
                if project.short_name != 'mozilla' and project.short_name != 'kernel':
                    pass
                else:
                    continue
            else:
                continue		
            
            # Create the input paths
            inputs_csv, _ = project.find_last_diff_cves(project.output_directory_diff_path, project, INPUT, OUTPUT, True)

            for input_csv_path in inputs_csv:
        
                if "desaparecidas" not in input_csv_path:
                    continue                    

                log.info(f'Inserting the deleted info vulnerabilities for the project "{project}" using the information in "{input_csv_path}".')

                vulnerabilities = pd.read_csv(input_csv_path, dtype=str)
                vulnerabilities = vulnerabilities.replace({np.nan: None})

                # Iterate for each row
                for _, row in vulnerabilities.iterrows():
                    
                    # Search for entries for that cve
                    cve = row['CVE']
                    success, _ = db.execute_query('SELECT * FROM VULNERABILITIES WHERE CVE = %(CVE)s;', params={'CVE': cve})
        
                    # The cve does not exists
                    if success and db.cursor.rowcount == 0:
                        log.info(f'CVE {cve} is not in database.')
                        continue
                    
                    # Search for the reason
                    razao: str = search_for_reason(row['CVE URL'])
                    resultado = db.cursor.fetchall()
                    
                    # For all entries in database we search the id and update the MSSING field
                    for cves in resultado:
                        cve_a_atualizar = cves["CVE"]
                        success, _ = db.execute_query(	'''
                                                            UPDATE VULNERABILITIES SET MISSING = %(RAZAO)s
                                                            WHERE CVE = %(CVE)s;
                                                            ''',     
                                                            params={
                                                            'RAZAO': razao,
                                                            'CVE': cve_a_atualizar
                                                            })
                        if success:
                            log.info(f'Deleted {cve_a_atualizar} with reason {razao}!')

        log.info('Committing changes.')
        db.commit()

    log.info('Finished running.')
    print('Finished running.')


if __name__ == '__main__':
    if len(sys.argv) == 1:
        main("")
    else:
        main(sys.argv[1])