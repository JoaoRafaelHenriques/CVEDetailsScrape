#!/usr/bin/env python3

"""
	This script inserts the data from any CSV files generated by "collect_vulnerabilities.py" into the VULNERABILITIES table in the database.
	Before running this script, the table must be first modified by running "alter_vulnerabilities_in_database.py".
"""

from typing import cast

import numpy as np # type: ignore
import pandas as pd # type: ignore
import sys

from modules.common import log, deserialize_json_container, calculate_cvss_rating, string_values_to_list_values
from modules.database import Database
from modules.project import Project
from emails.send_email import Email

####################################################################################################

INPUT = None
OUTPUT = "affected-files.csv"

####################################################################################################

def send_notification(cwe: str) -> None:
    '''
		Sends a notification to email.

		Params:
			cwe (str): cwe number
    '''
    email = Email()
    email.start()
    email.send("[AUTO] COLLECT_VULNERABILITIES", f"A CWE ({cwe}) without category was inserted.")
     
def cwes_treatment(row: pd.Series, db: Database) -> None:
	'''
		Function to insert cwes connected with a vulnerability.
  
		Params:
			row (pd.Series): row with the vulnerability information
			db (Database): database object
    '''
    # Search for the vulnerability id
	cve = row['CVE']
	success, _ = db.execute_query('SELECT * FROM VULNERABILITIES WHERE CVE = %(CVE)s LIMIT 1;', params={'CVE': cve})
	
	# If something was found isolate the id
	if success and db.cursor.rowcount > 0:
		resultado = db.cursor.fetchall()
		cve_id = int(resultado[0]["V_ID"])
		success, _ = db.execute_query('DELETE FROM VULNERABILITIES_CWE WHERE V_ID = %(v_id)s;', params={'v_id': cve_id})

		# Build the list of cwes and insert all
		lista_cwes = string_values_to_list_values(row['CWE'])
	
		for cwe in lista_cwes:
			success, _ = db.execute_query(f'''SELECT * FROM CWE_INFO WHERE V_CWE LIKE "{cwe}";''')
   
			if success and db.cursor.rowcount > 0:
				resultado = db.cursor.fetchall()
				id_cwe = resultado[0]["V_CWE"]
				category_cwe = resultado[0]["ID_CATEGORY"]
    
				# Verify if the entry already exists
				success, _ = db.execute_query(f'''SELECT * FROM VULNERABILITIES_CWE WHERE V_CWE LIKE "{id_cwe}" AND V_ID = {cve_id};''')
				if success and db.cursor.rowcount == 0:
					success, _ = db.execute_query(f'''INSERT INTO VULNERABILITIES_CWE (V_ID, V_CWE) VALUES ({cve_id}, {id_cwe})''')
					if success:
						db.commit()

						# If the cwe inserted does not have category we sand a notification
						if category_cwe is None:
							send_notification(str(id_cwe))
						log.info('CWE inserted')

def vectores_treatement(row: pd.Series, db: Database) -> None:
    '''
		Function to insert vectores connected with a vulnerability.
  
		Params:
			row (pd.Series): row with the vulnerability information
			db (Database): database object
    '''
    # Search for the vulnerability id
    cve = row['CVE']
    success, _ = db.execute_query('SELECT * FROM VULNERABILITIES WHERE CVE = %(CVE)s LIMIT 1;', params={'CVE': cve})
    
    # If something was found isolate the id
    if success and db.cursor.rowcount > 0:
        resultado = db.cursor.fetchall()
        cve_id = int(resultado[0]["V_ID"])
        success, _ = db.execute_query('DELETE FROM VETORES WHERE V_ID = %(v_id)s;', params={'v_id': cve_id})
        
        # Build the list of cvss_ratings and insert all the vectors (each vector have one cvss_rating)
        cvss_ratings = calculate_cvss_rating(row['CVSS Score'])
        for index in range(len(cvss_ratings)):
            
			# Verify if the vector already exists
            if db.verify_vector(row, index, cve_id):
                log.info('Vector already inserted.')
            else:
                db.insert_vector(row, index, cve_id, cvss_ratings[index])
                log.info(f'Vector inserted for {cve}.')

def main(project_to_analizys: str) -> None:
	'''
		Function thats starts the process.
		The insertion will start for the project of the params.
  
		Params:
			project_to_analizys(str): name of the project or an empty string that represents everthing except kernel and mozilla
 	'''
	with Database(buffered=True) as db:

		# Get the information of the projects
		project_list = Project.get_project_list_from_config()
		
		# Iterate for each one and continue only if the the params correspond
		for project in project_list:
			
			if project.short_name == project_to_analizys:
				pass
			elif project_to_analizys == "":
				if project.short_name != 'mozilla' and project.short_name != 'kernel':
					pass
				else:
					log.info(f'The project {project.short_name} will be skiped.')
					continue
			else:
				log.info(f'The project {project.short_name} will be skiped.')
				continue	
			
			# Create the input paths
			inputs_csv = project.find_diff_file('novas')
		
			log.info(f'Inserting the vulnerabilities for the project "{project}" using the information in "{inputs_csv}".')

			vulnerabilities = pd.read_csv(inputs_csv, dtype=str)
			vulnerabilities = vulnerabilities.replace({np.nan: None})

			# Iterate for each row 
			for _, row in vulnerabilities.iterrows():
				
				# Search if there is already an entry for this cve
				cve = row['CVE']
				
				vulnerability_types = deserialize_json_container(row['Vulnerability Types'], [])
				classification = ''.join(['>' + type + '<' for type in vulnerability_types]) if vulnerability_types else 'Undefined'
		
				advisory_id_list = cast(list, deserialize_json_container(row['Advisory IDs'], [None]))
				bugzilla_url_list = cast(list, deserialize_json_container(row['Bugzilla URLs'], [None]))
	

				insert: bool = False
				sucess, _ = db.execute_query(f'SELECT V_ID from VULNERABILITIES WHERE CVE = "{cve}"')
				if sucess:
					num_cves_in_database = db.cursor.rowcount
					num_vulnerabilities_to_update = num_cves_in_database
					if num_cves_in_database > 0:
						resultados = db.cursor.fetchall()

				for advisory_id in advisory_id_list:

					# Format advisory IDs depending on the project:
					# - Mozilla: IDs like "MFSA-2013-49" should be formatted as "mfsa2013-49".
					# - Xen: IDs like "XSA-99" are already formatted correctly.
					if advisory_id is not None and project.short_name == 'mozilla':
						mfsa, remainder = advisory_id.split('-', 1)
						advisory_id = mfsa.lower() + remainder

					for bugzilla_url in bugzilla_url_list:
						
						# While we have entries on the database to update we update and do not insert
						if num_vulnerabilities_to_update > 0:
							v_id = resultados[num_cves_in_database - num_vulnerabilities_to_update]['V_ID']
							success, error_code = db.execute_query('''
																	UPDATE VULNERABILITIES SET ID_ADVISORIES = %(ID_ADVISORIES)s, V_CLASSIFICATION = %(V_CLASSIFICATION)s, VULNERABILITY_URL = %(VULNERABILITY_URL)s, MISSING = NULL
																	WHERE V_ID = %(V_ID)s;
																	''',     
																	params={
																	'V_ID': v_id,
																	'ID_ADVISORIES': advisory_id,
																	'V_CLASSIFICATION': classification,
																	'VULNERABILITY_URL': bugzilla_url,
																	})
							num_vulnerabilities_to_update -= 1
						
						# When the entries are all updated or does not exist, we just insert
						else:
							print("Criei")
							success, error_code = db.execute_query(	'''
																	INSERT INTO VULNERABILITIES
																	(
																		R_ID, CVE,
																		ID_ADVISORIES, V_CLASSIFICATION,
																		VULNERABILITY_URL
																	)
																	VALUES
																	(
																		%(R_ID)s, %(CVE)s,
																		%(ID_ADVISORIES)s, %(V_CLASSIFICATION)s,
																		%(VULNERABILITY_URL)s
																	);
																	''',
																	
																	params={
																		'R_ID': project.database_id,
																		'CVE': cve,
																		'ID_ADVISORIES': advisory_id,
																		'V_CLASSIFICATION': classification,
																		'VULNERABILITY_URL': bugzilla_url,
																	}
																)
	
						# If we insert at least one, we have to insert the vectores and cwes than
						if success:
							insert = True
						else:
							log.error(f'Failed to insert the {cve} for the project "{project}" ({advisory_id}, {bugzilla_url}) with the error code {error_code}.')

				# When exist some entries left, we just remove them
				if num_vulnerabilities_to_update > 0:
					while num_vulnerabilities_to_update > 0:
						v_id = resultados[num_cves_in_database - num_vulnerabilities_to_update]['V_ID']
						success, error_code = db.execute_query(f'UPDATE VULNERABILITIES SET MISSING = "Not Used" WHERE V_ID = {v_id};')
						num_vulnerabilities_to_update -= 1

				# Now we insert everything about vectores and cwes
				if insert:
					log.info(f'Inserted the {cve} (ID {db.cursor.lastrowid}) for the project "{project}".')
					db.commit()
					vectores_treatement(row, db)
					cwes_treatment(row, db)

		##################################################

		log.info('Committing changes.')
		db.commit()

	log.info('Finished running.')
	print('Finished running.')

if __name__ == '__main__':
    if len(sys.argv) == 1:
        main("")
    else:
        main(sys.argv[1])